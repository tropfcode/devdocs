

.. _sphx_glr_gallery_statistics_hist.py:


==========
Histograms
==========

Demonstrates how to plot histograms with matplotlib.



.. code-block:: python


    import matplotlib.pyplot as plt
    import numpy as np
    from matplotlib import colors
    from matplotlib.ticker import PercentFormatter

    # Fixing random state for reproducibility
    np.random.seed(19680801)








Generate data and plot a simple histogram
-----------------------------------------

To generate a 1D histogram we only need a single vector of numbers. For a 2D
histogram we'll need a second vector. We'll generate both below, and show
the histogram for each vector.



.. code-block:: python


    N_points = 100000
    n_bins = 20

    # Generate a normal distribution, center at x=0 and y=5
    x = np.random.randn(N_points)
    y = .4 * x + np.random.randn(100000) + 5

    fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

    # We can set the number of bins with the `bins` kwarg
    axs[0].hist(x, bins=n_bins)
    axs[1].hist(y, bins=n_bins)





.. image:: /gallery/statistics/images/sphx_glr_hist_001.png
    :align: center




Updating histogram colors
-------------------------

The histogram method returns (among other things) a `patches` object. This
gives us access to the properties of the objects drawn. Using this, we can
edit the histogram to our liking. Let's change the color of each bar
based on its y value.



.. code-block:: python


    fig, axs = plt.subplots(1, 2, tight_layout=True)

    # N is the count in each bin, bins is the lower-limit of the bin
    N, bins, patches = axs[0].hist(x, bins=n_bins)

    # We'll color code by height, but you could use any scalar
    fracs = N.astype(float) / N.max()

    # we need to normalize the data to 0..1 for the full range of the colormap
    norm = colors.Normalize(fracs.min(), fracs.max())

    # Now, we'll loop through our objects and set the color of each accordingly
    for thisfrac, thispatch in zip(fracs, patches):
        color = plt.cm.viridis(norm(thisfrac))
        thispatch.set_facecolor(color)

    # We can also normalize our inputs by the total number of counts
    axs[1].hist(x, bins=n_bins, normed=True)

    # Now we format the y-axis to display percentage
    axs[1].yaxis.set_major_formatter(PercentFormatter(xmax=1))





.. image:: /gallery/statistics/images/sphx_glr_hist_002.png
    :align: center




Plot a 2D histogram
-------------------

To plot a 2D histogram, one only needs two vectors of the same length,
corresponding to each axis of the histogram.



.. code-block:: python


    fig, ax = plt.subplots(tight_layout=True)
    hist = ax.hist2d(x, y)





.. image:: /gallery/statistics/images/sphx_glr_hist_003.png
    :align: center




Customizing your histogram
--------------------------

Customizing a 2D histogram is similar to the 1D case, you can control
visual components such as the bin size or color normalization.



.. code-block:: python


    fig, axs = plt.subplots(3, 1, figsize=(5, 15), sharex=True, sharey=True,
                            tight_layout=True)

    # We can increase the number of bins on each axis
    axs[0].hist2d(x, y, bins=40)

    # As well as define normalization of the colors
    axs[1].hist2d(x, y, bins=40, norm=colors.LogNorm())

    # We can also define custom numbers of bins for each axis
    axs[2].hist2d(x, y, bins=(80, 10), norm=colors.LogNorm())

    plt.show()



.. image:: /gallery/statistics/images/sphx_glr_hist_004.png
    :align: center




**Total running time of the script:** ( 0 minutes  0.323 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: hist.py <hist.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: hist.ipynb <hist.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
