

.. _sphx_glr_gallery_userdemo_demo_axis_direction.py:


===================
Demo Axis Direction
===================





.. image:: /gallery/userdemo/images/sphx_glr_demo_axis_direction_001.png
    :align: center





.. code-block:: python


    import numpy as np
    import matplotlib.pyplot as plt
    import mpl_toolkits.axisartist.angle_helper as angle_helper
    import mpl_toolkits.axisartist.grid_finder as grid_finder
    from matplotlib.projections import PolarAxes
    from matplotlib.transforms import Affine2D

    import mpl_toolkits.axisartist as axisartist

    from mpl_toolkits.axisartist.grid_helper_curvelinear import \
        GridHelperCurveLinear


    def setup_axes(fig, rect):
        """
        polar projection, but in a rectangular box.
        """

        # see demo_curvelinear_grid.py for details
        tr = Affine2D().scale(np.pi/180., 1.) + PolarAxes.PolarTransform()

        extreme_finder = angle_helper.ExtremeFinderCycle(20, 20,
                                                         lon_cycle=360,
                                                         lat_cycle=None,
                                                         lon_minmax=None,
                                                         lat_minmax=(0, np.inf),
                                                         )

        grid_locator1 = angle_helper.LocatorDMS(12)
        grid_locator2 = grid_finder.MaxNLocator(5)

        tick_formatter1 = angle_helper.FormatterDMS()

        grid_helper = GridHelperCurveLinear(tr,
                                            extreme_finder=extreme_finder,
                                            grid_locator1=grid_locator1,
                                            grid_locator2=grid_locator2,
                                            tick_formatter1=tick_formatter1
                                            )

        ax1 = axisartist.Subplot(fig, rect, grid_helper=grid_helper)
        ax1.axis[:].toggle(ticklabels=False)

        fig.add_subplot(ax1)

        ax1.set_aspect(1.)
        ax1.set_xlim(-5, 12)
        ax1.set_ylim(-5, 10)

        return ax1


    def add_floating_axis1(ax1):
        ax1.axis["lat"] = axis = ax1.new_floating_axis(0, 30)
        axis.label.set_text(r"$\theta = 30^{\circ}$")
        axis.label.set_visible(True)

        return axis


    def add_floating_axis2(ax1):
        ax1.axis["lon"] = axis = ax1.new_floating_axis(1, 6)
        axis.label.set_text(r"$r = 6$")
        axis.label.set_visible(True)

        return axis


    fig = plt.figure(1, figsize=(8, 4))
    fig.clf()
    fig.subplots_adjust(left=0.01, right=0.99, bottom=0.01, top=0.99,
                        wspace=0.01, hspace=0.01)

    for i, d in enumerate(["bottom", "left", "top", "right"]):
        ax1 = setup_axes(fig, rect=241++i)
        axis = add_floating_axis1(ax1)
        axis.set_axis_direction(d)
        ax1.annotate(d, (0, 1), (5, -5),
                     xycoords="axes fraction", textcoords="offset points",
                     va="top", ha="left")

    for i, d in enumerate(["bottom", "left", "top", "right"]):
        ax1 = setup_axes(fig, rect=245++i)
        axis = add_floating_axis2(ax1)
        axis.set_axis_direction(d)
        ax1.annotate(d, (0, 1), (5, -5),
                     xycoords="axes fraction", textcoords="offset points",
                     va="top", ha="left")

    plt.show()

**Total running time of the script:** ( 0 minutes  0.451 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: demo_axis_direction.py <demo_axis_direction.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: demo_axis_direction.ipynb <demo_axis_direction.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
